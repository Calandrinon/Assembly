     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, printf
     5                                  import exit msvcrt.dll
     6                                  import printf msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9 00000000 6162636466666600            a db "abcdfff", 0
    10                                      len_a equ $-a-1
    11 00000008 61626364656600              b db "abcdef", 0
    12                                      len_b equ $-b-1
    13 0000000F 546865726520697320-         no_prefix_error_message db "There is no common prefix!", 0
    13 00000018 6E6F20636F6D6D6F6E-
    13 00000021 207072656669782100 
    14                                      
    15                                  ;;; TASK 7:
    16                                  ;;; Three strings (of characters) are given. Show the longest prefix for each of the three pairs of two strings that can be formed. 
    17                                      
    18                                  segment code use32 class=code
    19                                  
    20                                  print_prefix:
    21                                      ;;void print_prefix(char *string, int number_of_characters); -> prints the prefix with the length "number_of_characters"
    22                                      
    23 00000000 8B442408                    mov EAX, [ESP+8]
    24 00000004 8B5C2404                    mov EBX, [ESP+4]
    25 00000008 C6040300                    mov [EBX+EAX], byte 0
    26                                      
    27 0000000C FF742404                    push dword [ESP+4]
    28 00000010 FF15[00000000]              call [printf]
    29 00000016 83C404                      add ESP, 4
    30                                      
    31 00000019 C20800                      ret 4*2
    32                                  
    33                                  min:
    34                                      ;; int min(int a, int b);
    35 0000001C 8B4C2404                    mov ECX, [ESP+4]    ;; the first number
    36 00000020 8B542408                    mov EDX, [ESP+8]    ;; the second number
    37                                      
    38 00000024 39CA                        cmp EDX, ECX
    39 00000026 7703                        ja .set_result
    40 00000028 C20800                      ret 4*2
    41                                      
    42                                      .set_result:
    43 0000002B 89CA                            mov EDX, ECX
    44 0000002D C20800                          ret 4*2
    45                                      
    46                                  
    47                                  longest_common_prefix:
    48                                      ;; int longest_common_prefix(char *str1, char *str2, int l_str1, int l_str2);
    49                                      
    50 00000030 8B442404                    mov EAX, [ESP+4]   ;; the offset of the first string
    51 00000034 8B5C2408                    mov EBX, [ESP+8]   ;; the offset of the second string
    52                                      
    53                                      
    54 00000038 FF74240C                    push dword [ESP+12]   ;; [ESP+12] - the size of the first string
    55 0000003C FF742410                    push dword [ESP+16]   ;; [ESP+16] - the size of the second string
    56 00000040 E8D7FFFFFF                  call min        ;; moves into EDX the minimum between the two numbers
    57                                      
    58 00000045 89D1                        mov ECX, EDX
    59 00000047 6A00                        push dword 0    ;; [ESP+4] - here, we will store the length of the longest common prefix
    60 00000049 52                          push dword EDX  ;; [ESP] - here we will store EDX, the minimum of the two length of the strings
    61                                      
    62                                      .repeat:
    63 0000004A 8B3424                          mov ESI, [ESP]
    64 0000004D 29CE                            sub ESI, ECX      ;; ESI = [ESP] - ECX
    65                                          
    66 0000004F 8A1430                          mov DL, [EAX+ESI] ;; [EAX+ESI] - the character from the first string
    67 00000052 3A1433                          cmp DL, [EBX+ESI] ;; [EBX+ESI] - the character from the second string is compared with the character from the first string
    68 00000055 7402                            je .increment_length
    69 00000057 EB0D                            jmp .print_longest_common_prefix
    70                                          
    71                                          .increment_length:
    72 00000059 FF442404                            inc dword [ESP+4]
    73 0000005D E2EB                        loop .repeat
    74                                      
    75 0000005F 837C240400                  cmp dword [ESP+4], 0
    76 00000064 EB0D                        jmp .no_common_prefix_exception
    77                                      
    78                                      
    79                                      .print_longest_common_prefix:
    80 00000066 FF742404                        push dword [ESP+4]
    81 0000006A 50                              push EAX
    82 0000006B E890FFFFFF                      call print_prefix
    83 00000070 C21000                          ret 4*4
    84                                          
    85                                      .no_common_prefix_exception:
    86 00000073 68[0F000000]                    push dword no_prefix_error_message
    87 00000078 FF15[00000000]                  call [printf]
    88 0000007E 83C404                          add ESP, 4
    89 00000081 C21000                          ret 4*4
    90                                          
    91                                  start:
    92 00000084 6A06                        push dword len_b
    93 00000086 6A07                        push dword len_a
    94 00000088 68[08000000]                push dword b
    95 0000008D 68[00000000]                push dword a
    96 00000092 E899FFFFFF                  call longest_common_prefix
    97                                      
    98 00000097 6A00                        push dword 0
    99 00000099 FF15[00000000]              call [exit]
   100                                      
   101                                      
   102                                      
